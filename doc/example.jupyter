nbformat 4
nbformat_minor 0
markdown
    # An Example Notebook
    
    This notebook is meant for testing conversion to other formats.
    
    It contains Markdown cells and code cells with different kinds of outputs.
markdown
    ## Markdown
    
    We can use *emphasis*, **boldface**, `preformatted text`.
    
    > It looks like strike-out text is not supported: ~~strikethrough~~.
    
    * Red
    * Green
    * Blue
    
    ***
    
    1. One
    1. Two
    1. Three
    
    ### Equations
    
    Equations can be formatted really nicely, either inline, like $\text{e}^{i\pi} = -1$, or on a separate line, like
    
    $$
    \int_{-\infty}^\infty f(x) \delta(x - x_0) dx = f(x_0)
    $$
    
    ### Code
    
    We can also write code with nice syntax highlighting:
    
    ```python
    print("Hello, world!")
    ```
    
    ### Tables
    
    A     | B     | A and B
    ------|-------|--------
    False | False | False
    True  | False | False
    False | True  | False
    True  | True  | True
    
    ### Images
    
    Jupyter notebook icon (local): ![Jupyter notebook icon](images/notebook_icon.png)
    
    Python logo (local): ![Python logo](images/python_logo.svg)
    
    Jupyter logo (remote): ![Jupyter logo (remote)](http://jupyter.org/assets/nav_logo.svg)
    
    Python logo (remote): ![Python logo (remote)](https://www.python.org/static/img/python-logo-large.png)
    
    ### Links to Other Notebooks
    
    Relative links to local notebooks can be used: [a link to a notebook in a subdirectory](subdir/another.ipynb), [a link to an orphan notebook](orphan.ipynb) (latter won't work in LaTeX output, because orphan pages are not included there).
    
    This is how a link is created in Markdown:
    
    ```
    [a link to a notebook in a subdirectory](subdir/another.ipynb)
    ```
    
    Markdown also supports *reference-style* links: [a reference-style link][mylink], [another version of the same link][mylink].
    
    [mylink]: subdir/another.ipynb
    
    These can be created with this syntax:
    
    ```
    [a reference-style link][mylink]
    
    [mylink]: subdir/another.ipynb
    ```
    
    Links to sub-sections are also possible, e.g. [this subsection](subdir/another.ipynb#A-Sub-Section).
    
    This link was created with:
    
    ```
    [this subsection](subdir/another.ipynb#A-Sub-Section)
    ```
    
    You just have to remember to replace spaces with hyphens!
    
    BTW, links to sections of the current notebook work, too, e.g. [beginning of this section](#Links-to-Other-Notebooks).
    
    This can be done, as expected, like this:
    
    ```
    [beginning of this section](#Links-to-Other-Notebooks)
    ```
markdown
    ## Code Cells
    
    An empty code cell:
code
    
  metadata
    {
     "collapsed": true
    }
markdown
    A cell with no output:
code
    None
  metadata
    {
     "collapsed": true
    }
markdown
    A simple output:
code
    6 * 7
  metadata
    {
     "collapsed": false
    }
markdown
    The standard output stream:
code
    print('Hello, world!')
  metadata
    {
     "collapsed": false
    }
markdown
    Normal output + standard output
code
    print('Hello, world!')
    6 * 7
  metadata
    {
     "collapsed": false
    }
markdown
    The standard error stream is highlighted and displayed just below the code cell.
    The standard output stream comes afterwards (with no special highlighting).
    Finally, the "normal" output is displayed.
code
    import logging
    logging.warning('I am a warning and I will appear on the standard error stream')
    print('I will appear on the standard output stream')
    'I am the "normal" output'
  metadata
    {
     "collapsed": false
    }
markdown
    ## Special Display Formats
    
    See [IPython example notebook](https://nbviewer.jupyter.org/github/ipython/ipython/blob/master/examples/IPython Kernel/Rich Output.ipynb).
    
    TODO: tables? e.g. Pandas DataFrame?
code
    from IPython.display import display, Image, SVG, Math, YouTubeVideo
  metadata
    {
     "collapsed": false
    }
markdown
    ### Local Image Files
code
    i = Image(filename='images/notebook_icon.png')
    i
  metadata
    {
     "collapsed": false
    }
code
    display(i)
  metadata
    {
     "collapsed": false
    }
markdown
    For some reason this doesn't work with `Image(...)`:
code
    SVG(filename='images/python_logo.svg')
  metadata
    {
     "collapsed": false
    }
markdown
    ### Image URLs
code
    Image(url='https://www.python.org/static/img/python-logo-large.png')
  metadata
    {
     "collapsed": false
    }
code
    Image(url='https://www.python.org/static/img/python-logo-large.png', embed=True)
  metadata
    {
     "collapsed": false
    }
code
    Image(url='http://jupyter.org/assets/nav_logo.svg')
  metadata
    {
     "collapsed": false
    }
code
    Image(url='https://www.python.org/static/favicon.ico')
  metadata
    {
     "collapsed": false
    }
code
    Image(url='http://python.org/images/python-logo.gif')
  metadata
    {
     "collapsed": false
    }
markdown
    ### Math
code
    eq = Math(r"\int_{-\infty}^\infty f(x) \delta(x - x_0) dx = f(x_0)")
    eq
  metadata
    {
     "collapsed": false
    }
code
    display(eq)
  metadata
    {
     "collapsed": false
    }
code
    %%latex
    \begin{equation}
    \int_{-\infty}^\infty f(x) \delta(x - x_0) dx = f(x_0)
    \end{equation}
  metadata
    {
     "collapsed": false
    }
code
    YouTubeVideo('iV2ViNJFZC8')
  metadata
    {
     "collapsed": false
    }
markdown
    ## Raw Cells
    
    Cells with the cell type "Raw NBConvert" can have different formats.
    This information is stored in the notebook metadata.
    To select the format from within Jupyter, switch the cell toolbar to "Raw Cell Format".
raw
    By default (if no cell format is selected), the cell content is included (without any conversion) in both the HTML and LaTeX output.
    This is typically not useful at all.
raw
    Raw cells in "reST" format are interpreted as reStructuredText_ and parsed by Sphinx_.
    The result is visible in both HTML and LaTeX output.
    This way, links from Jupyter notebooks to reST pages are possible, e.g. :doc:`rst`.
    
    .. _reStructuredText: http://sphinx-doc.org/rest.html
    .. _Sphinx: http://sphinx-doc.org/
  metadata
    {
     "raw_mimetype": "text/restructuredtext"
    }
raw
    Raw cells in "Markdown" format are interpreted as [Markdown](https://daringfireball.net/projects/markdown/) and the result is included in both HTML and LaTeX output.
    Since the Jupyter Notebook also supports "normal" Markdown cells, this might not be useful *at all*.
  metadata
    {
     "raw_mimetype": "text/markdown"
    }
raw
    <p>Raw cells in &ldquo;HTML&rdquo; format are only included in HTML output (without any conversion).
    This might not be <em>very useful</em>, since raw HTML code is also allowed within &ldquo;normal&rdquo; Markdown cells.</p>
    <p>Raw cells in &ldquo;LaTeX&rdquo; format are only included in LaTeX output.</p>
  metadata
    {
     "raw_mimetype": "text/html"
    }
raw
    Raw cells in ``LaTeX'' format are only included in \LaTeX\ output (without any conversion).
    
    Raw cells in ``HTML'' format are only included in HTML output.
    This might not be \emph{very useful}, since raw HTML code is also allowed within ``normal'' Markdown cells.
  metadata
    {
     "raw_mimetype": "text/latex"
    }
markdown
    Raw cells in "Python" format are not shown at all (nor acted upon in any way).
raw
    print("I'm a raw Python cell!")
  metadata
    {
     "raw_mimetype": "text/x-python"
    }
metadata
    {
     "celltoolbar": "Raw Cell Format",
     "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.4.4"
     }
    }
