nbformat 4
nbformat_minor 1
markdown
    This notebook is part of the `nbsphinx` documentation: http://nbsphinx.readthedocs.org/.
  metadata
    {
     "nbsphinx": "hidden"
    }
markdown
    # A Pre-Executed Notebook
    
    Notebooks with no outputs are automatically executed during the Sphinx build process.
    If, however, there is at least one output cell present, the notebook is not evaluated and included as is.
markdown
    ## Explicitly disabling notebook execution
    
    If you want to include a notebook without outputs and yet don't want nbsphinx to execute it for you, you can explicitly disable this feature setting the `nbsphinx_execute` config option to `"false"`.  `nbsphinx_execute`
    has three possible states, `"always"`, `"auto"` (default), and `"never"`.
    
    You can do this globally by setting this option in [conf.py](conf.py):
    
    ```
    nbsphinx_execute = 'never'
    ```
    
    Or on a per notebook basis by adding this to the notebook's JSON metadata:
    
    ```json
    "nbsphinx": {
      "execute": "never"
    },
    ```
markdown
    This can be useful for the following use cases.
markdown
    ## Long-Running Cells
    
    If you are doing some very time-consuming computations, you may go over the default timeout for a cell, which is 30 seconds. To include long-running cells, you have two choices:
    
    1. Change the timeout for a cell either generally or on a per-notebook basis -- see [Long-Running Cells](timeout.ipynb).
    
    1. Execute the notebook beforehand and save the results, like it's done in this example notebook:
code 1
    import time
  metadata
    {
     "collapsed": true
    }
code 2
    %time time.sleep(60 * 60)
    6 * 7
  stream stdout
    CPU times: user 160 ms, sys: 56 ms, total: 216 ms
    Wall time: 1h 1s
  execute_result
  - text/plain
    42
  metadata
    {
     "collapsed": false
    }
markdown
    ## Rare Libraries
    
    You might have created results with a library that's hard to install and therefore you have only managed to install it on one very old computer in the basement, so you probably cannot run this whenever you build your Sphinx docs.
code 3
    from a_very_rare_library import calculate_the_answer
  metadata
    {
     "collapsed": true
    }
code 4
    calculate_the_answer()
  execute_result
  - text/plain
    42
  metadata
    {
     "collapsed": false
    }
markdown
    ## Exceptions
    
    If an exception is raised during the Sphinx build process, it is stopped (the build process, not the exception!).
    If you want to show to your audience how an exception looks like, you have two choices:
    
    1. Allow errors -- either generally or on a per-notebook basis -- see [Ignoring Errors](allow-errors.ipynb).
    
    1. Execute the notebook beforehand and save the results, like it's done in this example notebook:
code 5
    1 / 0
  error
  - ename
    ZeroDivisionError
  - evalue
    division by zero
  - traceback
    [1;31m---------------------------------------------------------------------------[0m
   ~
    [1;31mZeroDivisionError[0m                         Traceback (most recent call last)
   ~
    [1;32m<ipython-input-5-b710d87c980c>[0m in [0;36m<module>[1;34m()[0m
    [1;32m----> 1[1;33m [1;36m1[0m [1;33m/[0m [1;36m0[0m[1;33m[0m[0m
    [0m
   ~
    [1;31mZeroDivisionError[0m: division by zero
  metadata
    {
     "collapsed": false
    }
metadata
    {
     "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.5.1+"
     },
     "widgets": {
      "state": {},
      "version": "0.2.0"
     }
    }
