nbformat 4
nbformat_minor 1
markdown
    This notebook is part of the `nbsphinx` documentation: https://nbsphinx.readthedocs.io/.
  metadata
    {
     "nbsphinx": "hidden"
    }
markdown
    # Pre-Executing Notebooks
    
    Automatically executing notebooks during the Sphinx build process is an important feature of `nbsphinx`.
    However, there are a few use cases where pre-executing a notebook and storing the outputs might be preferable.
    Storing any output will, by default, stop ``nbsphinx`` from executing the notebook.
markdown
    ## Long-Running Cells
    
    If you are doing some very time-consuming computations, it might not be feasible to re-execute the notebook every time you build your Sphinx documentation.
    
    So just do it once -- when you happen to have the time -- and then just keep the output.
code 1
    import time
code 2
    %time time.sleep(60 * 60)
    6 * 7
  stream stdout
    CPU times: user 160 ms, sys: 56 ms, total: 216 ms
    Wall time: 1h 1s
  execute_result
  - text/plain
    42
markdown
    If you *do* want to execute your notebooks, but some cells run for a long time, you can change the timeout, see [Cell Execution Timeout](timeout.ipynb).
markdown
    ## Rare Libraries
    
    You might have created results with a library that's hard to install and therefore you have only managed to install it on one very old computer in the basement, so you probably cannot run this whenever you build your Sphinx docs.
code 3
    from a_very_rare_library import calculate_the_answer
code 4
    calculate_the_answer()
  execute_result
  - text/plain
    42
markdown
    ## Exceptions
    
    If an exception is raised during the Sphinx build process, it is stopped (the build process, not the exception!).
    If you want to show to your audience how an exception looks like, you have two choices:
    
    1. Allow errors -- either generally or on a per-notebook basis -- see [Ignoring Errors](allow-errors.ipynb).
    
    1. Execute the notebook beforehand and save the results, like it's done in this example notebook:
code 5
    1 / 0
  error
  - ename
    ZeroDivisionError
  - evalue
    division by zero
  - traceback
    [0;31m---------------------------------------------------------------------------[0m
   ~
    [0;31mZeroDivisionError[0m                         Traceback (most recent call last)
   ~
    [0;32m<ipython-input-5-b710d87c980c>[0m in [0;36m<module>[0;34m()[0m
    [0;32m----> 1[0;31m [0;36m1[0m [0;34m/[0m [0;36m0[0m[0;34m[0m[0m
    [0m
   ~
    [0;31mZeroDivisionError[0m: division by zero
metadata
    {
     "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.4"
     },
     "widgets": {
      "state": {},
      "version": "0.2.0"
     }
    }
