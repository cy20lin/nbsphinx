nbformat 4
nbformat_minor 1
markdown
    This notebook is part of the `nbsphinx` documentation: http://nbsphinx.readthedocs.io/.
  metadata
    {
     "nbsphinx": "hidden"
    }
markdown
    # Code Cells
    
    ## Code, Output, Streams
    
    An empty code cell:
code
    
markdown
    Two empty lines:
code
    
    
markdown
    Leading/trailing empty lines:
code
    
    
    # 2 empty lines before, 1 after
    
markdown
    A simple output:
code
    6 * 7
markdown
    The standard output stream:
code
    print('Hello, world!')
markdown
    Normal output + standard output
code
    print('Hello, world!')
    6 * 7
markdown
    The standard error stream is highlighted and displayed just below the code cell.
    The standard output stream comes afterwards (with no special highlighting).
    Finally, the "normal" output is displayed.
code
    import sys
    
    print("I'll appear on the standard error stream", file=sys.stderr, flush=True)
    print("I'll appear on the standard output stream")
    "I'm the 'normal' output"
markdown
    ## Cell Magics
    
    Cells can contain code in other languages by means of [cell magics](http://ipython.readthedocs.io/en/stable/interactive/magics.html#cell-magics):
code
    %%bash
    for i in 1 2 3
    do
        echo $i
    done
markdown
    ## Special Display Formats
    
    See [IPython example notebook](https://nbviewer.jupyter.org/github/ipython/ipython/blob/master/examples/IPython Kernel/Rich Output.ipynb).
    
    TODO: tables? e.g. Pandas DataFrame?
code
    from IPython.display import display
markdown
    ### Local Image Files
code
    from IPython.display import Image
    i = Image(filename='images/notebook_icon.png')
    i
code
    display(i)
markdown
    For some reason this doesn't work with `Image(...)`:
code
    from IPython.display import SVG
    SVG(filename='images/python_logo.svg')
markdown
    ### Image URLs
code
    Image(url='https://www.python.org/static/img/python-logo-large.png')
code
    Image(url='https://www.python.org/static/img/python-logo-large.png', embed=True)
code
    Image(url='http://jupyter.org/assets/nav_logo.svg')
code
    Image(url='https://www.python.org/static/favicon.ico')
code
    Image(url='http://python.org/images/python-logo.gif')
markdown
    ### Math
code
    from IPython.display import Math
    eq = Math(r"\int_{-\infty}^\infty f(x) \delta(x - x_0) dx = f(x_0)")
    eq
code
    display(eq)
code
    %%latex
    \begin{equation}
    \int_{-\infty}^\infty f(x) \delta(x - x_0) dx = f(x_0)
    \end{equation}
markdown
    ### YouTube Videos
code
    from IPython.display import YouTubeVideo
    YouTubeVideo('WAikxUGbomY')
markdown
    ### Arbitrary JavaScript Output (HTML only)
code
    %%javascript
    
    var text = document.createTextNode("Hello, I was generated with JavaScript!");
    // Content appended to "element" will be visible in the output area:
    element.appendChild(text);
markdown
    <div class="alert alert-info">
    
    **Note:**
    
    jQuery should be available, but using the readthedocs.org default theme, it's not. See [the issue on Github](https://github.com/snide/sphinx_rtd_theme/issues/328).
    Other Sphinx themes are not affected by this.
    
    </div>
markdown
    ### Unsupported Output Types
    
    If a code cell produces data with an unsupported MIME type, the Jupyter Notebook doesn't generate any output.
    `nbsphinx`, however, shows a warning message.
code
    display({
        'text/x-python': 'print("Hello, world!")',
        'text/x-haskell': 'main = putStrLn "Hello, world!"',
    }, raw=True)
markdown
    ## ANSI Colors
    
    The standard output and standard error streams may contain [ANSI escape sequences](https://en.wikipedia.org/wiki/ANSI_escape_code) to change the text and background colors.
code
    print('BEWARE: \x1b[1;33;41mugly colors\x1b[m!', file=sys.stderr, flush=True)
    print('ABC\x1b[43mDEF\x1b[35mGHI\x1b[1mJKL\x1b[49mMNO\x1b[39mPQR\x1b[22mSTU')
  metadata
    {
     "scrolled": true
    }
markdown
    The following code showing the 8 basic ANSI colors is based on http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html.
    Each of the 8 colors has an "intense" variation, which is used for bold text.
code
    text = ' XYZ '
    formatstring = '\x1b[{}m' + text + '\x1b[m'
    
    print(' ' * 6 + ' ' * len(text) +
          ''.join('{:^{}}'.format(bg, len(text)) for bg in range(40, 48)))
    for fg in range(30, 38):
        for bold in False, True:
            fg_code = ('1;' if bold else '') + str(fg)
            print(' {:>4} '.format(fg_code) + formatstring.format(fg_code) +
                  ''.join(formatstring.format(fg_code + ';' + str(bg))
                          for bg in range(40, 48)))
markdown
    ANSI also supports a set of 256 indexed colors.
    The following code showing all of them is based on http://bitmote.com/index.php?post/2012/11/19/Using-ANSI-Color-Codes-to-Colorize-Your-Bash-Prompt-on-Linux.
code
    formatstring = '\x1b[38;5;{0};48;5;{0}mX\x1b[1mX\x1b[m'
    
    print('  + ' + ''.join('{:2}'.format(i) for i in range(36)))
    print('  0 ' + ''.join(formatstring.format(i) for i in range(16)))
    for i in range(7):
        i = i * 36 + 16
        print('{:3} '.format(i) + ''.join(formatstring.format(i + j)
                                          for j in range(36) if i + j < 256))
markdown
    You can even use 24-bit RGB colors:
code
    start = 255, 0, 0
    end = 0, 0, 255
    length = 79
    out = []
    
    for i in range(length):
        rgb = [start[c] + int(i * (end[c] - start[c]) / length) for c in range(3)]
        out.append('\x1b['
                   '38;2;{rgb[2]};{rgb[1]};{rgb[0]};'
                   '48;2;{rgb[0]};{rgb[1]};{rgb[2]}mX\x1b[m'.format(rgb=rgb))
    print(''.join(out))
metadata
    {
     "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.3"
     }
    }
